#!/usr/bin/env python

# Copyright (C) 2005 - 2009  Eric Van Dewoestine
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##
# Script to check for any new updates for each of eclim's eclipse plugin
# dependencies.
#
# Author: Eric Van Dewoestine
##

import os.path, shutil, sys, tempfile

from collections import defaultdict
from urllib import urlopen
from xml.dom.minidom import parse
from zipfile import ZipFile

def checkForUpdates():
  path = os.path.dirname(sys.path[0])
  dom = parse(file(os.path.join(path, 'src/installer/resources/dependencies.xml')))

  dependencies = defaultdict(list)
  for dependencyElement in dom.getElementsByTagName('dependency'):
    siteElement = dependencyElement.getElementsByTagName('site')[0]
    url = siteElement.getAttribute('url')
    name = dependencyElement.getAttribute('id')
    version = Version(dependencyElement.getAttribute('version'))
    dependencies[url].append((name, version))

  for url in dependencies.keys():
    checkForUpdate(url, dependencies[url])


def checkForUpdate(url, features):
  versions = {}
  dom = None
  featureNames = [f[0] for f in features]

  # site.xml
  response = urlopen(url + 'site.xml')
  if response.code == 200:
    dom = parse(response)
    elementName = 'feature'

  # content.jar
  if not dom:
    response = urlopen(url + 'content.jar')
    if response.code == 200:
      print('reading content.xml from %scontent.jar...' % url),
      sys.stdout.flush()
      temp = tempfile.TemporaryFile()
      try:
        shutil.copyfileobj(response, temp)
        dom = parse(ZipFile(temp).open('content.xml'))
      finally:
        temp.close()
      print('done')
      elementName = 'unit'
      featureNames = [f + '.feature.group' for f in featureNames]

  if not dom:
    print('WARN: unable to locate site.xml or content.jar at %s' % url)
    return

  versions = {}
  features = dict(features)
  try:
    for element in dom.getElementsByTagName(elementName):
      name = element.getAttribute('id')
      if name in featureNames:
        name = name.replace('.feature.group', '')
        version = Version(element.getAttribute('version'))
        currentVersion = features[name]
        if version >= currentVersion:
          vers = versions.get(name, [])
          vers.append(version)
          versions[name] = vers
        else:
          versions[name] = []
  finally:
    dom.unlink()

  for name in sorted(features.keys()):
    if name not in versions:
      print('[\033[1;31m*\033[0m] %s not found at %s' % (name, url))
    else:
      currentVersion = features[name]
      vers = versions[name]
      if currentVersion not in vers and len(vers) == 0:
        print('[\033[1;31m*\033[0m] %s version %s not found at %s' % (
          name, features[name], url
        ))
      elif len(vers) == 1 and currentVersion in vers:
        print('[\033[1;32m*\033[0m] %s is up to date.' % name)
      else:
        if currentVersion in vers:
          vers.remove(currentVersion)
        vers.sort()
        vers.reverse()
        print('[\033[1;33m*\033[0m] %s has the following updates available: %s' % (
          name, ', '.join([str(v) for v in vers])
        ))


class Version(object):
  def __init__(self, versionString):
    parts = versionString.split('.', 4)
    assert len(parts) >= 3, 'Invalid version string: %s' % versionString
    self.major, self.minor, self.patch = [int(p) for p in parts[:3]]

  def __cmp__(self, other):
    if self.major != other.major:
      return self.major - other.major
    if self.minor != other.minor:
      return self.minor - other.minor
    if self.patch != other.patch:
      return self.patch - other.patch
    return 0

  def __str__(self):
    return '%i.%i.%i' % (self.major, self.minor, self.patch)

  def __repr__(self):
    return str(self)


checkForUpdates()

# vim:ft=python
