# Copyright (C) 2005 - 2012  Eric Van Dewoestine
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

java_search.indeterminate=You must specify a valid pattern or element search.

class.not.found=Class ''{1}'' not found in project ''{0}''.
type.not.found=Type ''{1}'' not found in project ''{0}''.
type.not.a.class=Type ''{0}'' is not a java class.

method.not.found=Method ''{1}'' not found in ''{0}''.
method.already.implemented=Method ''{2}'' from ''{1}'' already implemented in ''{0}''.

constructor.already.exists=Constructor already exists: ''{0}''.

field.not.found=No field found with name ''{0}'' in ''{1}''.
not.a.field=Element is not a field.
check.import=Check that you have imported the type and that it is spelled correctly.

error.not.found=No error found in ''{0}'' on line number {1}.

prototype.missing.argument=Missing one of -p or -f (project or file).
prototype.header=\
     /**\n\
\u0020* Prototype generated by eclim.\n\
\u0020*\n\
\u0020* If you have the source for this library you can optionally attached it\n\
\u0020* via the .classpath file for the current project.\n\
\u0020*/\n
prototype.header.asm=\
     /**\n\
\u0020* Prototype generated by eclim.\n\
\u0020*/\n

classpath.variable.created=Created variable ''{0}''.
classpath.variable.deleted=Deleted variable ''{0}''.

ivy.repo.not.set=\
  The classpath variable ''{0}'' is not set.  Use :IvyRepo <path> to set it.
mvn.repo.not.set=\
  The classpath variable ''{0}'' is not set.  Use :MvnRepo to set it.

log4j.logger.name.invalid=No class or package found with name ''{0}''.
log4j.appender.name.invalid=No appender found with name ''{0}''.
log4j.level.name.invalid=Invalid level ''{0}''.

filter.not.found=No filter definition with name ''{0}'' defined.
servlet.not.found=No servlet definition with name ''{0}'' defined.

rename.element.unsupported=Rename of this element is currently unsupported: {0}
rename.element.unable=Unable to rename element: {0}

######### Setting Descriptions #########
org.eclim.java.logging.impl=\
  Logging implementation to use (commons-logging|log4j|slf4j|jdk|custom)
org.eclim.java.logging.template=\
  When the logging implementation is ''custom'', the name of the template to use.
org.eclim.java.validation.ignore.warnings=\
  Whether or not to ignore warnings when validating java source files (true|false).

org.eclim.java.doc.version=\
  The value to use for the @version tag on class javadocs.
org.eclim.java.doc.dest=\
  The project relative directory where javadocs are written to.
org.eclim.java.doc.sourcepath=\
  The project relative, space separated, javadoc source paths to use.\n\
  Default is to use all your project''s source directories.
org.eclim.java.compile.args=\
  Json formatted list of strings to supply as args to javac when\n\
  compile your project's code (Ex. ["-Xlint:-unchecked", "-Xlint:deprecation"])
org.eclim.java.run.jvmargs=\
  Json formatted list of strings to supply as args to the jvm when\n\
  running your main class (Ex. ["-Dfoo=bar", "-Dbaz"])
org.eclim.java.run.mainclass=\
  Fully qualified class name which contains your project''s main method.
org.eclim.java.doc.packagenames=\
  Space separated list package names to run javadoc against.

org.eclim.java.compile.sourcepath=\
  The project relative, space separated, source paths to use when running javac.\n\
  Default is to use all your project''s source directories.

org.eclim.java.checkstyle.config=\
  Project relative or absolute path to your checkstyle config file.
org.eclim.java.checkstyle.properties=\
  Project relative or absolute path to your checkstyle properties file.

org.eclim.java.junit.command=\
  The command used to run junit tests.\n\
  Supports following placeholders:\n\
  <testcase>: path separated name of the test case.  Ex. org/test/SomeTest\n\
  <testcase_class>: fully qualified class name of the test case.  Ex. org.test.SomeTest
org.eclim.java.junit.output_dir=\
  The directory where your JUnit test results are written to.\n\
  Supports <project> placeholder for current project''s root directory.
org.eclim.java.junit.src_dir=\
  The directory where your JUnit test cases are located.\n\
  Supports <project> placeholder for current project''s root directory.
org.eclim.java.junit.version=\
  The primary junit version (3 or 4) which is used by :JUnitImpl\n\
  to determine which method template to use.

org.eclipse.jdt.core.compiler.source=\
  Java version to keep source code compatable with (1.4, 1.5, etc.).
org.eclipse.jdt.core.formatter.tabulation.char=\
  Character to use for indentation (space, tab, mixed).
org.eclipse.jdt.core.formatter.tabulation.size=\
  Indentation width (2, 4, etc.)
org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=\
  Use only tabs for leading indentation (true, false)
org.eclipse.jdt.ui.importorder=\
  Semicolon separated list of package names in the order that their equivalent\n\
  import statements should be sorted.
